package com.gl.userManagementApp.service;

import com.gl.userManagementApp.dto.User;
import com.gl.userManagementApp.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class UserServiceTest {
    private UserService userService;
    private UserRepository userRepository;

    @BeforeEach
    void init() {
        userRepository = Mockito.spy(UserRepository.class);
        userService = new UserService(userRepository);
    }

    @Test
    @DisplayName("When Users are present")
    void getAllUsers() {
        //given
        User nisha = new User(1L, "Nisha", "Delhi");
        User infini = new User(2L, "Infini", "USA");
        Mockito.when(userRepository.findAll()).thenReturn(Arrays.asList(nisha, infini));

        //when
        List<User> users = userService.getAllUsers();

        //then
        assertNotNull(users);
        assertEquals(2, users.size());
    }

    @Test
    @DisplayName("When Users are not present")
    void getAllUsersUsersNotPresent() {
        //when
        List<User> users = userService.getAllUsers();

        //then
        assertNotNull(users);
        assertEquals(0, users.size());
    }

//    @Test
    @DisplayName("Find user for given id which is present in the system")
    void getUserForGivenId() {
        //given
        User nisha = new User(1L, "Nisha", "Delhi");
        User infini = new User(2L, "Infini", "USA");
        userRepository.save(nisha);
        userRepository.save(infini);

        //when
        User user = userService.getUser(1L);

        //then
        assertNotNull(user);
        assertEquals("1",user.getId());
        assertEquals("Nisha",user.getName());
    }

    @Test
    @DisplayName("All the required input params are present")
    void addUser() {
        //given
        User nisha = new User(1L, "Nisha", "Delhi");

        //when
        User user = userService.addUser(nisha);

        //then
        assertNotNull(user);
        assertNotNull(user.getId());
        assertEquals("Nisha",user.getName());
    }
//    @Test
    @DisplayName("User Id is not present in the request then its generated by the system")
    void addUserIdNotPresent() {
        //given
        User redHat = new User(null, "Redhat", "USA");
        Mockito.when(userRepository.save(redHat)).thenReturn(redHat);

        //when
        User user = userService.addUser(redHat);

        //then
        assertNotNull(user);
        assertNotNull(user.getId());
        assertEquals("Redhat",user.getName());
    }

    @Test
    @DisplayName("User name is not present in the request then exception is raised")
    void addUserNameNotPresent() {
        //given
        User redHat = new User(123L, null, "USA");

        //when and then
        Exception exception = assertThrows(RuntimeException.class, ()-> userService.addUser(redHat));
        assertTrue(exception.getMessage().contains("name shouldn't be null"));
    }
    @Test
    @DisplayName("User address is not present in the request then exception is raised")
    void addUserAddressNotPresent() {
        //given
        User redHat = new User(123L, "Redhat", null);

        //when and then
        Exception exception = assertThrows(RuntimeException.class, ()-> userService.addUser(redHat));
        assertTrue(exception.getMessage().contains("address shouldn't be null"));
    }
//    @Test
    @DisplayName("update the user")
    void updateUser() {
        //given
        User redHat = new User(123L, "Redhat", "USA");
        userRepository.save(redHat);

        //when
        User updated = new User(123L,"Redhat-v2", "USA");
        User response = userService.updateUser(updated);

        //then
        assertNotNull(response);
        assertEquals("123", response.getId());
        assertEquals("Redhat-v2",response.getName());
    }

//    @Test
    @DisplayName("delete the user")
    void deleteUser() {
        //given
        User redHat = new User(123L, "Redhat", "USA");
        userRepository.save(redHat);

        //when
        User response = userService.deleteUser(123L);

        //then
        assertNotNull(response);
        assertEquals("123", response.getId());
        assertEquals("Redhat",response.getName());
    }
}